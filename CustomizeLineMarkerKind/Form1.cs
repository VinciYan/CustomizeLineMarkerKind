using DevExpress.Drawing;
using DevExpress.XtraCharts;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Resources;
using System.Text;
using System.Windows.Forms;

namespace CustomizeLineMarkerKind
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        public Form1()
        {
            InitializeComponent();

            List<ProfileData> profileDatas = new List<ProfileData>();

            profileDatas.Add(new ProfileData() { X = 0, Y = 20, BCTYPE = "A"});
            profileDatas.Add(new ProfileData() { X = 10, Y = 50, BCTYPE = "B" });
            profileDatas.Add(new ProfileData() { X = 20, Y = 80, BCTYPE = "A" });
            profileDatas.Add(new ProfileData() { X = 30, Y = 32, BCTYPE = "B" });
            profileDatas.Add(new ProfileData() { X = 80, Y = 30, BCTYPE = "A" });
            profileDatas.Add(new ProfileData() { X = 90, Y = 160, BCTYPE = "A" });
            profileDatas.Add(new ProfileData() { X = 110, Y = 30, BCTYPE = "B" });
            profileDatas.Add(new ProfileData() { X = 130, Y = 45, BCTYPE = "A" });

            List<double> xList = profileDatas.Select(x => x.X).ToList();
            List<double> yList = profileDatas.Select(x => x.Y).ToList();
            List<string> bcName = profileDatas.Select(x => x.BCTYPE).ToList();

            Series series = new Series("Series", ViewType.Line);
            foreach (var each in profileDatas)
            {
                series.Points.Add(new SeriesPoint(each.X, each.Y));
            }
            ChartControl lineChart = new ChartControl();

            lineChart.Series.Add(series);

            // Set the numerical argument scale types for the series,
            // as it is qualitative, by default.
            series.ArgumentScaleType = ScaleType.Numerical;

            // Access the view-type-specific options of the series.
            ((LineSeriesView)series.View).MarkerVisibility = DevExpress.Utils.DefaultBoolean.True;
            ((LineSeriesView)series.View).LineMarkerOptions.Size = 10;
            ((LineSeriesView)series.View).LineMarkerOptions.Kind = MarkerKind.Circle;
            ((LineSeriesView)series.View).LineStyle.DashStyle = DashStyle.Dash;

            ((XYDiagram)lineChart.Diagram).AxisX.NumericScaleOptions.AutoGrid = false;
            ((XYDiagram)lineChart.Diagram).AxisX.NumericScaleOptions.GridSpacing = 1;

            // Hide the legend (if necessary).
            lineChart.Legend.Visibility = DevExpress.Utils.DefaultBoolean.False;

            // Add a title to the chart (if necessary).


            // Add the chart to the form.
            lineChart.Dock = DockStyle.Fill;


            series.LabelsVisibility = DevExpress.Utils.DefaultBoolean.True;
            series.Label.ResolveOverlappingMode = ResolveOverlappingMode.JustifyAroundPoint;
            series.Label.LineLength = 30;

            XYDiagram diag = lineChart.Diagram as XYDiagram;

            if (diag == null) return;
            AxisX axisX = diag.AxisX;
            XYDiagram diagram = (XYDiagram)lineChart.Diagram;
            if (diagram != null)
            {
                diagram.AxisX.WholeRange.AutoSideMargins = false;
                diagram.EnableAxisXZooming = true;
                diagram.EnableAxisYZooming = true;
                diagram.ZoomingOptions.UseKeyboardWithMouse = true;
                diagram.ZoomingOptions.UseMouseWheel = true;

                SetAxisTitle(diag);
                CustomizeAxisRange(diagram, xList, yList);
            }

            axisX.Label.TextPattern = "{A}";
            lineChart.CustomDrawAxisLabel += lineChart_CustomDrawAxisLabel;

            //添加图标
            Series series1 = lineChart.Series[0];
            ResourceManager resMgr = new ResourceManager(typeof(Properties.Resource));
            for (int i = 0; i < lineChart.Series[0].Points.Count; i++)
            {
                switch (bcName[i])
                {
                    case "A": CreateAndAddImageAnnotation(resMgr, lineChart, "print", series.Points[i]); break;
                    case "B": CreateAndAddImageAnnotation(resMgr, lineChart, "preview", series.Points[i]); break;                    
                    default: break;
                }
            }

            axisX.LabelVisibilityMode = AxisLabelVisibilityMode.AutoGeneratedAndCustom;

            this.Controls.Add(lineChart);
        }
        private void CreateAndAddImageAnnotation(ResourceManager resMgr, ChartControl lineChart, string imageName, SeriesPoint anchorPoint)
        {
            Object image = resMgr.GetObject(imageName);

            // 将 Object 类型的值转换为 Bitmap 类型
            Bitmap imageBitmap = (Bitmap)image;
            imageBitmap = ResizeImage(imageBitmap, 25, 25);
            ImageAnnotation imageAnnotation = new ImageAnnotation();
            imageAnnotation.Image.Image = imageBitmap;
            imageAnnotation.AnchorPoint = new SeriesPointAnchorPoint(anchorPoint);
            //Apperence
            imageAnnotation.ShapePosition = new RelativePosition(0, 0);
            lineChart.AnnotationRepository.Add(imageAnnotation);
        }
        public static Bitmap ResizeImage(Image image, int newWidth, int newHeight)
        {
            Bitmap newImage = new Bitmap(newWidth, newHeight);
            using (Graphics graphics = Graphics.FromImage(newImage))
            {
                graphics.DrawImage(image, 0, 0, newWidth, newHeight);
            }
            return newImage;
        }
        private void lineChart_CustomDrawAxisLabel(object sender, CustomDrawAxisLabelEventArgs e)
        {
            if (e.Item.Axis is AxisX)
            {
                if (double.TryParse(e.Item.AxisValue.ToString(), out double x))
                {
                    if (x >= 0)
                    {
                        e.Item.Text = $"X0+{e.Item.AxisValue}";
                    }
                    else
                    {
                        e.Item.Text = "";
                    }
                }
            }
        }

        private void CustomizeAxisRange(XYDiagram diagram, List<double> xList, List<double> yList)
        {
            diagram.AxisY.WholeRange.Auto = false;
            diagram.AxisY.WholeRange.SetMinMaxValues((int)(yList.Min() - 10), (int)(yList.Max() + 10));

            diagram.AxisX.WholeRange.Auto = false;
            diagram.AxisX.WholeRange.SetMinMaxValues((int)(xList.Min() - 10), (int)(xList.Max() + 10));
        }
        private void SetAxisTitle(XYDiagram diag)
        {
            diag.AxisX.Title.Visibility = DevExpress.Utils.DefaultBoolean.True;
            diag.AxisX.Title.Alignment = StringAlignment.Center;
            diag.AxisX.Title.Text = "距离（米）";
            diag.AxisX.Title.DXFont = new DXFont("Tahoma", 10, DXFontStyle.Bold);

            diag.AxisY.Title.Visibility = DevExpress.Utils.DefaultBoolean.True;
            diag.AxisY.Title.Alignment = StringAlignment.Center;
            diag.AxisY.Title.Text = "高度（米）";
            diag.AxisY.Title.DXFont = new DXFont("Tahoma", 10, DXFontStyle.Bold);
        }

        public class ProfileData
        {
            public double X { get; set; }
            public double Y { get; set; }

            public string AliasName { get; set; }
            public string BCTYPE { get; set; }
            public string ID { get; set; } = Guid.NewGuid().ToString();

            public ProfileData()
            {
            }

            public ProfileData(float x, float y, string aliasName, string bctype)
            {
                this.X = x;
                this.Y = y;
                this.AliasName = aliasName;
                this.BCTYPE = bctype;
                this.ID = Guid.NewGuid().ToString();
            }
        }
    }
}
